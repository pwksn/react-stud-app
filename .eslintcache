[{"E:\\Web Development\\student-app\\src\\index.js":"1","E:\\Web Development\\student-app\\src\\reportWebVitals.js":"2","E:\\Web Development\\student-app\\src\\App.js":"3","E:\\Web Development\\student-app\\src\\Home.js":"4","E:\\Web Development\\student-app\\src\\Sidebar.js":"5","E:\\Web Development\\student-app\\src\\Courses\\Courses.js":"6","E:\\Web Development\\student-app\\src\\Courses\\CourseForm.js":"7","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CoursesList.js":"8","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseDetails.js":"9","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\SemesterPicker.js":"10","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseResources.js":"11","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CourseTile.js":"12","E:\\Web Development\\student-app\\src\\MockData\\courses.js":"13","E:\\Web Development\\student-app\\src\\hooks\\useFetch.js":"14","E:\\Web Development\\student-app\\src\\Courses\\CoursesHome.js":"15","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseAssignments.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":594,"mtime":1613411028416,"results":"20","hashOfConfig":"18"},{"size":145,"mtime":1612300144987,"results":"21","hashOfConfig":"18"},{"size":515,"mtime":1612992980104,"results":"22","hashOfConfig":"18"},{"size":1417,"mtime":1613057553565,"results":"23","hashOfConfig":"18"},{"size":7108,"mtime":1613326416115,"results":"24","hashOfConfig":"18"},{"size":1603,"mtime":1613059764537,"results":"25","hashOfConfig":"18"},{"size":3614,"mtime":1613326896994,"results":"26","hashOfConfig":"18"},{"size":700,"mtime":1613059942810,"results":"27","hashOfConfig":"18"},{"size":2395,"mtime":1612520019537,"results":"28","hashOfConfig":"18"},{"size":703,"mtime":1612983343256,"results":"29","hashOfConfig":"18"},{"size":1491,"mtime":1612520148351,"results":"30","hashOfConfig":"18"},{"size":1103,"mtime":1612804751846,"results":"31","hashOfConfig":"18"},{"size":1219,"mtime":1613414329245,"results":"32","hashOfConfig":"18"},{"size":1405,"mtime":1613412038202,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"14lmhqz",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Web Development\\student-app\\src\\index.js",[],["72","73"],"E:\\Web Development\\student-app\\src\\reportWebVitals.js",[],"E:\\Web Development\\student-app\\src\\App.js",[],"E:\\Web Development\\student-app\\src\\Home.js",[],"E:\\Web Development\\student-app\\src\\Sidebar.js",[],"E:\\Web Development\\student-app\\src\\Courses\\Courses.js",["74","75","76","77"],"import { useEffect, useState } from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport CourseDetails from \"./CourseDetails/CourseDetails\"\r\nimport CoursesList from \"./CoursesList/CoursesList\"\r\nimport CourseForm from \"./CourseForm\";\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport CoursesHome from \"./CoursesHome\";\r\n\r\nconst Courses = () => {\r\n\r\n    // const { data: courses, isPending, error } = useFetch('http://localhost:8000/courses');\r\n    // const [courseSelected, setCourseSelected] = useState(courses ? courses[0].id : null);\r\n    const [currentCourse, setCurrentCourse] = useState(null);\r\n\r\n    // useEffect(() => {\r\n    //     setCourseSelected(courses ? courses[0].id : null);\r\n    // }, [courses]);\r\n\r\n    const setCurrentCourseCallback = (currentCourse) => {\r\n        console.log(currentCourse);\r\n        setCurrentCourse(currentCourse);\r\n    }\r\n\r\n    return (\r\n        <div className=\"courses-box\">\r\n            {/* <Route exact path=\"/courses/home\" component={CoursesHome} /> */}\r\n            <Route exact path=\"/courses/home\" render={(props) => <CoursesHome {...props} setCurrentCourse={setCurrentCourseCallback}/>}/>\r\n            {/* <Route exact path =\"/courses/form/:id?\" component={CourseForm} /> */}\r\n            <Route exact path=\"/courses/form/:id?\" render={(props) => <CourseForm {...props} currentFormCourse={currentCourse}/>}/>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Courses;","E:\\Web Development\\student-app\\src\\Courses\\CourseForm.js",["78"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nconst CourseForm = ({ currentFormCourse }) => {\r\n\r\n    const [courseName, setCourseName] = useState('');\r\n    const [courseSem, setCourseSem] = useState('');\r\n    const [lectureDate, setLectureDate] = useState('');\r\n    const [labDate, setLabDate] = useState('');\r\n    const [courseLocation, setCourseLocation] = useState('');\r\n    const [courseLecturer, setCourseLecturer] = useState('');\r\n    const [courseColor, setCourseColor] = useState('');\r\n    const [upelLink, setUpelLink] = useState('');\r\n    const [eLectureLink, setELectureLink] = useState('');\r\n    const [driveLink, setDriveLink] = useState('');\r\n\r\n    const [isPostPending, setIsPostPending] = useState(false);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n\r\n    const onFormCancel = (e) => {\r\n        e.preventDefault(); // without this line: Warning: Form submission canceled because the form is not connected\r\n        history.push('/courses/home');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setEditedCourseData();\r\n        }\r\n    }, [id]);\r\n\r\n    const setEditedCourseData = () => {\r\n        setCourseName(currentFormCourse.name);\r\n        setCourseSem(+currentFormCourse.sem);\r\n        setLectureDate(currentFormCourse.lecture);\r\n        setLabDate(currentFormCourse.lab);\r\n        setCourseLocation(currentFormCourse.location);\r\n        setCourseLecturer(currentFormCourse.lecturer);\r\n        setCourseColor(currentFormCourse.color);\r\n        setUpelLink(currentFormCourse.upelLink);\r\n        setELectureLink(currentFormCourse.eLectureLink);\r\n        setDriveLink(currentFormCourse.driveLink);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newCourse = {\r\n            name: courseName,\r\n            sem: +courseSem,\r\n            color: courseColor,\r\n            lecture: lectureDate,\r\n            lab: labDate,\r\n            location: courseLocation,\r\n            lecturer: courseLecturer,\r\n            upelLink: upelLink,\r\n            eLectureLink: eLectureLink,\r\n            driveLink: driveLink\r\n        };\r\n\r\n        setIsPostPending(true);\r\n\r\n        if (id) {\r\n            fetch('http://localhost:8000/courses/' + id, {\r\n                    method: 'DELETE'\r\n                }).then(() => {\r\n                    fetch('http://localhost:8000/courses', {\r\n                        method: 'POST',\r\n                        headers: { \"Content-Type\": \"application/json\"},\r\n                        body: JSON.stringify(newCourse)\r\n                    }).then(() => {\r\n                        setIsPostPending(false);\r\n                        history.push('/courses/home');\r\n                    })\r\n                })\r\n        } else {\r\n            fetch('http://localhost:8000/courses', {\r\n                method: 'POST',\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(newCourse)\r\n            }).then(() => {\r\n                setIsPostPending(false);\r\n                history.push('/courses/home');\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"course-form\">\r\n            {!id && <h1>New Course</h1>}\r\n            {id && <h1>{courseName} - edit course</h1>}\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Course name:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            required\r\n                            value={courseName}\r\n                            onChange={(e) => setCourseName(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Semester:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            required\r\n                            min=\"1\"\r\n                            max=\"3\"\r\n                            value={courseSem}\r\n                            onChange={(e) => setCourseSem(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Lecture date:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            required\r\n                            value={lectureDate}\r\n                            onChange={(e) => setLectureDate(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Lab date:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            required\r\n                            value={labDate}\r\n                            onChange={(e) => setLabDate(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Location:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={courseLocation}\r\n                            onChange={(e) => setCourseLocation(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Lecturer:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={courseLecturer}\r\n                            onChange={(e) => setCourseLecturer(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <label>Course color:</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={courseColor}\r\n                    onChange={(e) => setCourseColor(e.target.value)}\r\n                />\r\n                <label>UPEL link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={upelLink}\r\n                    onChange={(e) => setUpelLink(e.target.value)}\r\n                />\r\n                <label>E-lecture link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={eLectureLink}\r\n                    onChange={(e) => setELectureLink(e.target.value)}\r\n                />\r\n                <label>Drive link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={driveLink}\r\n                    onChange={(e) => setDriveLink(e.target.value)}\r\n                />\r\n\r\n                <div className=\"d-flex\">\r\n                    <button className=\"btn-cancel\" onClick={onFormCancel}>Cancel</button>\r\n                    {!isPostPending && <button type=\"submit\">Submit</button>}\r\n                    {isPostPending && <button disabled type=\"submit\">Wait...</button>}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CourseForm;","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CoursesList.js",["79"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport CourseTile from \"./CourseTile\"\r\nimport SemesterPicker from \"./SemesterPicker\";\r\n\r\nconst CoursesList = ({ courses, setCourseSelection }) => {\r\n\r\n    const [activeSemester, setActiveSemester] = useState(1);\r\n    const [activeCourses, setActiveCourses] = useState(courses);\r\n\r\n    const onCourseSelection = (e) => {\r\n        setCourseSelection(e);\r\n    }\r\n\r\n    const setActiveSemesterCourses = () => {\r\n        if (activeSemester === 0) {\r\n            setActiveCourses(courses);\r\n        } else {\r\n            const activeSemesterCourses = courses.filter(course => course.sem === activeSemester);\r\n            setActiveCourses(activeSemesterCourses);\r\n        }\r\n    }\r\n\r\n    useEffect(setActiveSemesterCourses, [activeSemester]);\r\n\r\n    return (\r\n        <div className=\"courses-list\">\r\n            <div className=\"heading\">\r\n                <h1 className=\"header-1\">Courses</h1>\r\n                <Link to=\"/courses/form\">\r\n                    <button>\r\n                        <ion-icon name=\"add-outline\" style={{color: '#fff'}}></ion-icon>\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n            <SemesterPicker activeSem={activeSemester} setActiveSem={setActiveSemester}/>\r\n            <div className=\"course-tiles\">\r\n                {activeCourses.map((course) => (\r\n                    <CourseTile course={course} key={course.id} setDetails={e => onCourseSelection(e)}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CoursesList;","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseDetails.js",["80"],"import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from 'react-router-dom';\r\nimport CourseAssignments from \"./CourseAssignments\";\r\nimport CourseResources from \"./CourseResources\";\r\n\r\nconst CourseDetails = ({ courses, courseID, parentCallback }) => {\r\n\r\n    const currentCourse = courses.filter(course => course.id === courseID)[0];\r\n    const history = useHistory();\r\n\r\n    const sendCurrentCourse = () => {\r\n        parentCallback(currentCourse);\r\n    }\r\n\r\n    const handleCourseDelete = () => {\r\n        fetch('http://localhost:8000/courses/' + currentCourse.id, {\r\n            method: 'DELETE'\r\n        }).then(() => {\r\n            history.push('/');\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"course-details\">\r\n            <div className=\"course-details-header\">\r\n                <div className=\"course-details-header-name\">\r\n                    <div className=\"course-tile-img\" style={{backgroundColor: currentCourse.color}}> </div>\r\n                    <h1> {currentCourse.name} </h1>\r\n                </div>\r\n                <div className=\"course-details-terms\">\r\n                    {currentCourse.lecture && <div className=\"course-details-terms-lecture\">\r\n                        <ion-icon name=\"laptop-outline\" color=\"#333\"></ion-icon>\r\n                        <h3>{ currentCourse.lecture }</h3>\r\n                    </div>}\r\n                    {currentCourse.lab &&<div className=\"course-details-terms-lab\">\r\n                        <ion-icon name=\"calculator-outline\" color=\"#333\"></ion-icon>\r\n                        <h3>{ currentCourse.lab }</h3>\r\n                    </div>}\r\n                </div>\r\n                <div className=\"course-details-lecture\">\r\n                        {currentCourse.location && <div className=\"course-details-lecture-location\">\r\n                            <ion-icon name=\"business-outline\" color=\"#333\"></ion-icon>\r\n                            <p>{ currentCourse.location }</p>\r\n                        </div>}\r\n                        {currentCourse.lecturer &&<div className=\"course-details-lecture-lecturer\">\r\n                            <ion-icon name=\"person-circle-outline\" color=\"#333\"></ion-icon>\r\n                            <p>{ currentCourse.lecturer }</p>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n\r\n            {(currentCourse.upelLink || currentCourse.eLectureLink || currentCourse.driveLink) && <div className=\"course-details-resources\">\r\n                <CourseResources currentCourse={currentCourse}/>\r\n            </div>}\r\n\r\n            {currentCourse.assignments && <div className=\"course-assignments\">\r\n                <CourseAssignments currentCourse={currentCourse}/>\r\n            </div>}\r\n\r\n            <div className=\"course-changes\">\r\n                <div className=\"course-edit\" onClick={sendCurrentCourse}>\r\n                    <Link to={`/courses/form/${courseID}`}>\r\n                        <div className=\"course-edit-logo\">\r\n                            <ion-icon name=\"settings-outline\" style={{color: \"#eee\", width: '2rem', height: '2rem'}}></ion-icon>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <div className=\"course-delete\" onClick={handleCourseDelete}>\r\n                    <div className=\"course-delete-logo\">\r\n                        <ion-icon name=\"trash-outline\" style={{color: \"#eee\", width: '2rem', height: '2rem'}}></ion-icon>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CourseDetails;","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\SemesterPicker.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseResources.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CourseTile.js",[],"E:\\Web Development\\student-app\\src\\MockData\\courses.js",[],["81","82"],"E:\\Web Development\\student-app\\src\\hooks\\useFetch.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CoursesHome.js",["83"],"E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseAssignments.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":19},{"ruleId":"88","severity":1,"message":"92","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":21},{"ruleId":"88","severity":1,"message":"93","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":19},{"ruleId":"88","severity":1,"message":"94","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":30,"column":8,"nodeType":"97","endLine":30,"endColumn":12,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":24,"column":41,"nodeType":"97","endLine":24,"endColumn":57,"suggestions":"100"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":19},{"ruleId":"84","replacedBy":"101"},{"ruleId":"86","replacedBy":"102"},{"ruleId":"88","severity":1,"message":"103","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":15},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'CourseDetails' is defined but never used.","'CoursesList' is defined but never used.","'useFetch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setEditedCourseData'. Either include it or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'courses'. Either include it or remove the dependency array. If 'setActiveCourses' needs the current value of 'courses', you can also switch to useReducer instead of useState and read 'courses' in the reducer.",["107"],["104"],["105"],"'Route' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [id, setEditedCourseData]",{"range":"112","text":"113"},"Update the dependencies array to be: [activeSemester, courses]",{"range":"114","text":"115"},[1153,1157],"[id, setEditedCourseData]",[805,821],"[activeSemester, courses]"]