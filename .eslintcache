[{"E:\\Web Development\\student-app\\src\\index.js":"1","E:\\Web Development\\student-app\\src\\reportWebVitals.js":"2","E:\\Web Development\\student-app\\src\\App.js":"3","E:\\Web Development\\student-app\\src\\Sidebar.js":"4","E:\\Web Development\\student-app\\src\\Courses\\Courses.js":"5","E:\\Web Development\\student-app\\src\\Courses\\CoursesHome.js":"6","E:\\Web Development\\student-app\\src\\hooks\\useFetch.js":"7","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CoursesList.js":"8","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseDetails.js":"9","E:\\Web Development\\student-app\\src\\Courses\\CourseForm.js":"10","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\SemesterPicker.js":"11","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CourseTile.js":"12","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseResources.js":"13","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseAssignments\\CourseAssignments.js":"14","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseProgress\\CourseProgress.js":"15","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseAssignments\\CourseAssignmentsForm.js":"16","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseProgress\\CourseProgressForm.js":"17","E:\\Web Development\\student-app\\src\\Home\\Home.js":"18","E:\\Web Development\\student-app\\src\\Home\\HomeCountdown\\HomeCountdown.js":"19","E:\\Web Development\\student-app\\src\\Home\\HomeCountdown\\HomeCountdownForm.js":"20","E:\\Web Development\\student-app\\src\\Home\\HomeAssignments\\HomeAssignments.js":"21","E:\\Web Development\\student-app\\src\\Home\\HomeAssignments\\HomeAssignmentTile.js":"22","E:\\Web Development\\student-app\\src\\Home\\HomeSchedule\\HomeSchedule.js":"23","E:\\Web Development\\student-app\\src\\Home\\HomeSchedule\\HomeScheduleTile.js":"24"},{"size":500,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":625,"mtime":1614111623423,"results":"28","hashOfConfig":"26"},{"size":515,"mtime":1612992980104,"results":"29","hashOfConfig":"26"},{"size":908,"mtime":1615301005911,"results":"30","hashOfConfig":"26"},{"size":2738,"mtime":1615284607177,"results":"31","hashOfConfig":"26"},{"size":1103,"mtime":1612804751846,"results":"32","hashOfConfig":"26"},{"size":1014,"mtime":1615323285607,"results":"33","hashOfConfig":"26"},{"size":4003,"mtime":1615121384011,"results":"34","hashOfConfig":"26"},{"size":9078,"mtime":1615294606438,"results":"35","hashOfConfig":"26"},{"size":740,"mtime":1614943400229,"results":"36","hashOfConfig":"26"},{"size":1017,"mtime":1615127003590,"results":"37","hashOfConfig":"26"},{"size":2395,"mtime":1612520019537,"results":"38","hashOfConfig":"26"},{"size":5012,"mtime":1615284618777,"results":"39","hashOfConfig":"26"},{"size":4139,"mtime":1614240735463,"results":"40","hashOfConfig":"26"},{"size":2156,"mtime":1615284615232,"results":"41","hashOfConfig":"26"},{"size":798,"mtime":1613930538981,"results":"42","hashOfConfig":"26"},{"size":883,"mtime":1615368586824,"results":"43","hashOfConfig":"26"},{"size":1970,"mtime":1614851837927,"results":"44","hashOfConfig":"26"},{"size":684,"mtime":1615324470983,"results":"45","hashOfConfig":"26"},{"size":1614,"mtime":1615369326673,"results":"46","hashOfConfig":"26"},{"size":743,"mtime":1614852294821,"results":"47","hashOfConfig":"26"},{"size":4063,"mtime":1615284564419,"results":"48","hashOfConfig":"26"},{"size":669,"mtime":1615284541849,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"14lmhqz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"E:\\Web Development\\student-app\\src\\index.js",[],["107","108"],"E:\\Web Development\\student-app\\src\\reportWebVitals.js",[],"E:\\Web Development\\student-app\\src\\App.js",[],"E:\\Web Development\\student-app\\src\\Sidebar.js",[],"E:\\Web Development\\student-app\\src\\Courses\\Courses.js",["109","110","111","112"],"import { useEffect, useState } from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport CourseDetails from \"./CourseDetails/CourseDetails\"\r\nimport CoursesList from \"./CoursesList/CoursesList\"\r\nimport CourseForm from \"./CourseForm\";\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport CoursesHome from \"./CoursesHome\";\r\n\r\nconst Courses = () => {\r\n\r\n    const [currentCourse, setCurrentCourse] = useState(null);\r\n\r\n    const setCurrentCourseCallback = (currentCourse) => {\r\n        setCurrentCourse(currentCourse);\r\n    }\r\n\r\n    return (\r\n        <div className=\"courses-box\">\r\n            <Route exact path=\"/courses/home\" render={(props) => <CoursesHome {...props} setCurrentCourse={setCurrentCourseCallback}/>}/>\r\n            <Route exact path=\"/courses/form/:id?\" render={(props) => <CourseForm {...props} currentFormCourse={currentCourse}/>}/>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Courses;","E:\\Web Development\\student-app\\src\\Courses\\CoursesHome.js",["113","114"],"import { useEffect, useState } from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport CourseDetails from \"./CourseDetails/CourseDetails\"\r\nimport CoursesList from \"./CoursesList/CoursesList\"\r\n\r\nconst CoursesHome = ({ setCurrentCourse }) => {\r\n\r\n    const { data: courses, isPending, error } = useFetch('http://localhost:8000/courses');\r\n    const [courseSelected, setCourseSelected] = useState(null);\r\n    const [requestData, setRequestData] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        setCourseSelected(courses?.length ? courses[0].id : null);\r\n    }, [courses]);\r\n\r\n    const callbackFunction = (courseDetailsData) => {\r\n        setCurrentCourse(courseDetailsData);\r\n    }\r\n\r\n    const onCourseAssignmentsChange = (data, method) => {\r\n        if (method === 'remove') {\r\n            const currentCourse = courses.find(course => course.id === courseSelected);\r\n            currentCourse.assignments?.splice(data, 1);\r\n            fetch('http://localhost:8000/courses/' + currentCourse.id, {\r\n                        method: 'DELETE'\r\n                    }).then(() => {\r\n                        fetch('http://localhost:8000/courses', {\r\n                            method: 'POST',\r\n                            headers: { \"Content-Type\": \"application/json\"},\r\n                            body: JSON.stringify(currentCourse)\r\n                        }).then(() => {\r\n                            setRequestData(new Date());\r\n                        })\r\n                    })\r\n        } else if (method === 'add') {\r\n            fetch('http://localhost:8000/courses/' + data.id, {\r\n                        method: 'DELETE'\r\n                    }).then(() => {\r\n                        fetch('http://localhost:8000/courses', {\r\n                            method: 'POST',\r\n                            headers: { \"Content-Type\": \"application/json\"},\r\n                            body: JSON.stringify(data)\r\n                        }).then(() => {\r\n                            setRequestData(new Date());\r\n                        })\r\n                    })\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"courses\">\r\n            {courses && <CoursesList courses={courses.sort((a, b) => a.id - b.id)} setCourseSelection={e => setCourseSelected(e)}/>}\r\n            {courseSelected && courses && <CourseDetails courses={courses} courseID={courseSelected} parentCallback={callbackFunction} onCourseAssignmentsChange={onCourseAssignmentsChange}/>}\r\n            {error && <h1 className=\"loading-placeholder\">{error} :(</h1>}\r\n            {isPending && <h1 className=\"loading-placeholder\">Loading...</h1>}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CoursesHome;","E:\\Web Development\\student-app\\src\\hooks\\useFetch.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CoursesList.js",["115"],"import { useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport CourseTile from \"./CourseTile\"\r\n\r\nconst CoursesList = ({ courses, setCourseSelection }) => {\r\n\r\n    const [activeCourses, setActiveCourses] = useState(courses);\r\n\r\n    const onCourseSelection = (e) => {\r\n        setCourseSelection(e);\r\n    }\r\n\r\n    return (\r\n        <div className=\"courses-list\">\r\n            <div className=\"heading\">\r\n                <h1 className=\"header-1\">Courses</h1>\r\n                <Link to=\"/courses/form\">\r\n                    <button>\r\n                        <ion-icon name=\"add-outline\" style={{color: '#fff'}}></ion-icon>\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"course-tiles\">\r\n                {activeCourses.map((course) => (\r\n                    <CourseTile course={course} key={course.id} setDetails={e => onCourseSelection(e)}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CoursesList;","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseDetails.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CourseForm.js",["116"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nconst CourseForm = ({ currentFormCourse }) => {\r\n\r\n    const [courseName, setCourseName] = useState('');\r\n    const [lectureDay, setLectureDay] = useState('Mon');\r\n    const [lectureHour, setLectureHour] = useState('');\r\n    const [labDay, setLabDay] = useState('Mon');\r\n    const [labHour, setLabHour] = useState('');\r\n    const [courseLocation, setCourseLocation] = useState('');\r\n    const [courseLecturer, setCourseLecturer] = useState('');\r\n    const [courseColor, setCourseColor] = useState('');\r\n    const [upelLink, setUpelLink] = useState('');\r\n    const [eLectureLink, setELectureLink] = useState('');\r\n    const [driveLink, setDriveLink] = useState('');\r\n    const [assignments, setAssignments] = useState(null);\r\n    const [pointsEarned, setPointsEarned] = useState(0);\r\n    const [pointsPossible, setPointsPossible] = useState(0);\r\n\r\n\r\n    const [isPostPending, setIsPostPending] = useState(false);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n\r\n    const onFormCancel = (e) => {\r\n        e.preventDefault(); // without this line: Warning: Form submission canceled because the form is not connected\r\n        history.push('/courses/home');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setEditedCourseData();\r\n        }\r\n    }, [id]);\r\n\r\n    const setEditedCourseData = () => {\r\n        console.log(currentFormCourse);\r\n        setCourseName(currentFormCourse.name);\r\n        setLectureDay(currentFormCourse.lecture.lectureDay);\r\n        setLectureHour(currentFormCourse.lecture.lectureHour);\r\n        setLabDay(currentFormCourse.lab.labDay);\r\n        setLabHour(currentFormCourse.lab.labHour);\r\n        setCourseLocation(currentFormCourse.location);\r\n        setCourseLecturer(currentFormCourse.lecturer);\r\n        setCourseColor(currentFormCourse.color);\r\n        setUpelLink(currentFormCourse.upelLink);\r\n        setELectureLink(currentFormCourse.eLectureLink);\r\n        setDriveLink(currentFormCourse.driveLink);\r\n        setAssignments(currentFormCourse.assignments);\r\n        setPointsEarned(currentFormCourse.pointsEarned);\r\n        setPointsPossible(currentFormCourse.pointsPossible);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newCourse = {\r\n            name: courseName,\r\n            color: courseColor,\r\n            lecture: {\r\n                lectureDay: lectureDay,\r\n                lectureHour: lectureHour\r\n            },\r\n            lab: {\r\n                labDay: labDay,\r\n                labHour: labHour\r\n            },\r\n            location: courseLocation,\r\n            lecturer: courseLecturer,\r\n            upelLink: upelLink,\r\n            eLectureLink: eLectureLink,\r\n            driveLink: driveLink,\r\n            assignments: assignments,\r\n            pointsEarned: pointsEarned,\r\n            pointsPossible: pointsPossible\r\n        };\r\n\r\n        setIsPostPending(true);\r\n\r\n        if (id) {\r\n            fetch('http://localhost:8000/courses/' + id, {\r\n                    method: 'DELETE'\r\n                }).then(() => {\r\n                    fetch('http://localhost:8000/courses', {\r\n                        method: 'POST',\r\n                        headers: { \"Content-Type\": \"application/json\"},\r\n                        body: JSON.stringify(newCourse)\r\n                    }).then(() => {\r\n                        setIsPostPending(false);\r\n                        history.push('/courses/home');\r\n                    })\r\n                })\r\n        } else {\r\n            fetch('http://localhost:8000/courses', {\r\n                method: 'POST',\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(newCourse)\r\n            }).then(() => {\r\n                setIsPostPending(false);\r\n                history.push('/courses/home');\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"course-form\">\r\n            {!id && <h1>New Course</h1>}\r\n            {id && <h1>{courseName} - edit course</h1>}\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Course name:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            required\r\n                            value={courseName}\r\n                            onChange={(e) => setCourseName(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Lecture day:</label>\r\n                        <select \r\n                        value={lectureDay} \r\n                        onChange={(e) => setLectureDay(e.target.value)}>\r\n                            <option value=\"Mon\">Monday</option>\r\n                            <option value=\"Tue\">Tuesday</option>\r\n                            <option value=\"Wed\">Wednesday</option>\r\n                            <option value=\"Thu\">Thursday</option>\r\n                            <option value=\"Fri\">Friday</option>\r\n                            <option value=\"Sat\">Saturday</option>\r\n                            <option value=\"Sun\">Sunday</option>\r\n                            <option value=\"\">None</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label>Lecture hour:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={lectureHour}\r\n                            onChange={(e) => setLectureHour(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Lab day:</label>\r\n                        <select \r\n                        value={labDay} \r\n                        onChange={(e) => setLabDay(e.target.value)}>\r\n                            <option value=\"Mon\">Monday</option>\r\n                            <option value=\"Tue\">Tuesday</option>\r\n                            <option value=\"Wed\">Wednesday</option>\r\n                            <option value=\"Thu\">Thursday</option>\r\n                            <option value=\"Fri\">Friday</option>\r\n                            <option value=\"Sat\">Saturday</option>\r\n                            <option value=\"Sun\">Sunday</option>\r\n                            <option value=\"\">None</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label>Lab hour:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={labHour}\r\n                            onChange={(e) => setLabHour(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    <div>\r\n                        <label>Location:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={courseLocation}\r\n                            onChange={(e) => setCourseLocation(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Lecturer:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={courseLecturer}\r\n                            onChange={(e) => setCourseLecturer(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <label>Course color:</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={courseColor}\r\n                    onChange={(e) => setCourseColor(e.target.value)}\r\n                />\r\n                <label>UPEL link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={upelLink}\r\n                    onChange={(e) => setUpelLink(e.target.value)}\r\n                />\r\n                <label>E-lecture link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={eLectureLink}\r\n                    onChange={(e) => setELectureLink(e.target.value)}\r\n                />\r\n                <label>Drive link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={driveLink}\r\n                    onChange={(e) => setDriveLink(e.target.value)}\r\n                />\r\n\r\n                <div className=\"d-flex\">\r\n                    <button className=\"btn-cancel\" onClick={onFormCancel}>Cancel</button>\r\n                    {!isPostPending && <button type=\"submit\">Submit</button>}\r\n                    {isPostPending && <button disabled type=\"submit\">Wait...</button>}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CourseForm;","E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\SemesterPicker.js",[],["117","118"],"E:\\Web Development\\student-app\\src\\Courses\\CoursesList\\CourseTile.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseResources.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseAssignments\\CourseAssignments.js",["119"],"import { useEffect, useState } from \"react\";\r\nimport CourseAssignmentsForm from \"./CourseAssignmentsForm\";\r\n\r\nconst CourseAssignments = ({ currentCourse, onCourseAssignmentsChange }) => {\r\n\r\n    const [assignmentFormMode, setAssignmentFormMode] = useState(false);\r\n    const [assignmentsSortOrderAsc, setAssignmentsSortOrderAsc] = useState(true);\r\n\r\n    useEffect(() => {\r\n        sortCurrentCourseAssignments();\r\n    }, [currentCourse]);\r\n\r\n    const onAssignmentRemoval = (id) => {\r\n        const assignmentToRemove = currentCourse.assignments.filter(asg => asg.assignmentId === id)[0];\r\n        onCourseAssignmentsChange(currentCourse.assignments.indexOf(assignmentToRemove), 'remove');\r\n    }\r\n\r\n    const onAssignmentAdd = (assignment) => {\r\n        if(currentCourse.assignments) {\r\n            currentCourse.assignments.push(assignment);\r\n        } else {\r\n            currentCourse.assignments = [];\r\n            currentCourse.assignments.push(assignment);\r\n        }\r\n        onCourseAssignmentsChange(currentCourse, 'add');\r\n        setAssignmentFormMode(false);\r\n    }\r\n\r\n    const onAssignmentModeToggle = () => {\r\n        setAssignmentFormMode(!assignmentFormMode);\r\n    }\r\n\r\n    const sortCurrentCourseAssignments = () => {\r\n        if (currentCourse.assignments && currentCourse.assignments.length) {\r\n            const assignmentsSorted = [...currentCourse.assignments];\r\n            assignmentsSorted?.sort((a, b) => {\r\n                return new Date(a.assignmentDate).getTime() - new Date(b.assignmentDate).getTime();\r\n            });\r\n            return assignmentsSortOrderAsc ? assignmentsSorted : assignmentsSorted.reverse();\r\n        }\r\n    }\r\n\r\n    const getClassName = (assignmentType) => {\r\n        if (assignmentType === 'exam') {\r\n            return 'course-assignment-type course-assignment-type-exam';\r\n        } else if (assignmentType === 'test') {\r\n            return 'course-assignment-type course-assignment-type-test';\r\n        } else if (assignmentType === 'task') {\r\n            return 'course-assignment-type course-assignment-type-task';\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"course-assignments-box\">\r\n            <div className=\"course-assignments-header d-flex\">\r\n                <div className=\"d-flex\">\r\n                    <h2 className=\"header-1\">Assignments</h2>\r\n                    {!assignmentFormMode && currentCourse.assignments && currentCourse.assignments.length > 0 && <div className=\"course-assignment-counter d-flex\">\r\n                        <p>{currentCourse.assignments.length}</p>\r\n                    </div>}\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    {!assignmentFormMode && currentCourse.assignments?.length > 1 && <button onClick={() => setAssignmentsSortOrderAsc(!assignmentsSortOrderAsc)}>\r\n                        {assignmentsSortOrderAsc && <ion-icon name=\"arrow-down-outline\"></ion-icon>}\r\n                        {!assignmentsSortOrderAsc && <ion-icon name=\"arrow-up-outline\"></ion-icon>}\r\n                    </button>}\r\n                    <button onClick={onAssignmentModeToggle}>\r\n                        {assignmentFormMode && <ion-icon name=\"close\" style={{color: '#fff'}}></ion-icon>}\r\n                        {!assignmentFormMode && <ion-icon name=\"add-outline\" style={{color: '#fff'}}></ion-icon>}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {!assignmentFormMode && currentCourse.assignments && currentCourse.assignments.length > 0 && <div className=\"course-assignments-list\">\r\n                {sortCurrentCourseAssignments().map((assignment) => (\r\n                    <div className=\"course-assignment d-flex\" key={assignment.assignmentId}>\r\n                        <div className=\"course-assignment-info\">\r\n                            <h3>{assignment.assignmentName}</h3>\r\n                            <h4>{assignment.assignmentDate}</h4>\r\n                        </div>\r\n                        <div className={getClassName(assignment.assignmentType)}>\r\n                            <h3>{assignment.assignmentType}</h3>\r\n                        </div>\r\n                        <button className=\"course-assignment-delete\" onClick={() => onAssignmentRemoval(assignment.assignmentId)}>\r\n                            <ion-icon name=\"close\" style={{color: \"#eee\", width: '1rem', height: '1rem'}}></ion-icon>\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>}\r\n\r\n            {((!assignmentFormMode && !currentCourse.assignments) || (!assignmentFormMode && currentCourse.assignments.length === 0)) && <div className=\"course-assignment-placeholder-box\">\r\n                <h2 className=\"course-assignment-placeholder\">No assignments</h2>\r\n            </div>}\r\n            \r\n            {assignmentFormMode && <CourseAssignmentsForm onAssignmentAdd={onAssignmentAdd}/>}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CourseAssignments;","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseProgress\\CourseProgress.js",["120"],"import { useEffect, useState } from 'react';\r\nimport { CircleProgress } from 'react-gradient-progress';\r\nimport CourseProgressForm from './CourseProgressForm';\r\n\r\nconst calculateRemToPx = (rem) => {\r\n    return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n}\r\n\r\nconst CourseProgress = ({ currentCourse, onCourseAssignmentsChange }) => {\r\n\r\n    const [progressFormMode, setProgressFormMode] = useState(false);\r\n    const [pointsEarned, setPointsEarned] = useState(0);\r\n    const [pointsPossible, setPointsPossible] = useState(1); // to prevent 0:0 -> NaN in CircleProgress\r\n    const pointsPercentage = +((currentCourse.pointsEarned / currentCourse.pointsPossible) * 100).toPrecision(2);\r\n    \r\n\r\n    useEffect(() => {\r\n        setPointsEarned(currentCourse?.pointsEarned);\r\n        setPointsPossible(currentCourse?.pointsPossible);\r\n        calculateGrade();\r\n    }, [currentCourse]);\r\n\r\n    const onProgressModeToggle = () => {\r\n        setPointsEarned(currentCourse?.pointsEarned);\r\n        setPointsPossible(currentCourse?.pointsPossible);\r\n        setProgressFormMode(!progressFormMode);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        currentCourse.pointsEarned = +pointsEarned;\r\n        currentCourse.pointsPossible = +pointsPossible;\r\n        onCourseAssignmentsChange(currentCourse, 'add');\r\n        setProgressFormMode(false);\r\n    }\r\n\r\n    const calculateGrade = () => {\r\n        if (pointsPercentage < 50) {\r\n            return 2.0;\r\n        } else if (pointsPercentage >= 50 && pointsPercentage < 60) {\r\n            return 3.0;\r\n        } else if (pointsPercentage >= 60 && pointsPercentage < 70) {\r\n            return 3.5;\r\n        } else if (pointsPercentage >= 70 && pointsPercentage < 80) {\r\n            return 4.0;\r\n        } else if (pointsPercentage >= 80 && pointsPercentage < 90) {\r\n            return 4.5;\r\n        } else if (pointsPercentage >= 90) {\r\n            return 5.0;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"course-progress-box\">\r\n            <div className=\"course-progress-header d-flex\">\r\n                <h2 className=\"header-1\">Progress</h2>\r\n                <button onClick={onProgressModeToggle}>\r\n                    {progressFormMode && <ion-icon name=\"close\" style={{color: '#fff'}}></ion-icon>}\r\n                    {!progressFormMode && <ion-icon name=\"pencil-outline\" style={{color: '#fff'}}></ion-icon>}\r\n                </button>\r\n            </div>\r\n            {!progressFormMode && currentCourse.pointsPossible > 0 && <div className=\"course-progress-info\">\r\n                <div className=\"course-progress-bar\">\r\n                    <CircleProgress \r\n                        percentage={pointsPercentage}\r\n                        width={calculateRemToPx(20)}\r\n                        strokeWidth={15}\r\n                        fontSize={'3rem'}\r\n                        fontColor={'#333'}\r\n                        primaryColor={['#222C67', '#222C67']}\r\n                        secondaryColor={'#bdc0d1'}\r\n                    />\r\n\r\n                    <div className=\"course-progress-points\">\r\n                        <h3>{currentCourse.pointsEarned}/{currentCourse.pointsPossible}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"course-progress-data\">\r\n                    <div className=\"course-progress-grade\">\r\n                        <h2>{calculateGrade()}</h2>\r\n                        <p>Projected grade</p>\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            {!progressFormMode && !currentCourse.pointsPossible && <div className=\"course-progress-empty\">\r\n                <h2>No progress yet</h2>\r\n            </div>}\r\n            {progressFormMode && \r\n            <CourseProgressForm \r\n                pointsEarned={pointsEarned} \r\n                pointsPossible={pointsPossible} \r\n                setPointsEarned={setPointsEarned}\r\n                setPointsPossible={setPointsPossible}\r\n                handleSubmit={handleSubmit}\r\n            />}\r\n            \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CourseProgress;","E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseAssignments\\CourseAssignmentsForm.js",[],"E:\\Web Development\\student-app\\src\\Courses\\CourseDetails\\CourseProgress\\CourseProgressForm.js",[],"E:\\Web Development\\student-app\\src\\Home\\Home.js",[],"E:\\Web Development\\student-app\\src\\Home\\HomeCountdown\\HomeCountdown.js",[],"E:\\Web Development\\student-app\\src\\Home\\HomeCountdown\\HomeCountdownForm.js",[],"E:\\Web Development\\student-app\\src\\Home\\HomeAssignments\\HomeAssignments.js",["121","122"],"E:\\Web Development\\student-app\\src\\Home\\HomeAssignments\\HomeAssignmentTile.js",[],"E:\\Web Development\\student-app\\src\\Home\\HomeSchedule\\HomeSchedule.js",["123"],"import { useEffect, useState } from \"react\";\r\nimport HomeScheduleTile from \"./HomeScheduleTile\";\r\n\r\nconst HomeSchedule = ({ courses }) => {\r\n\r\n    const date = new Date();\r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    const [activeWeekday, setActiveWeekday] = useState(date.getDay());\r\n\r\n    useEffect(() => {\r\n        sortCoursesByDay();\r\n    }, [activeWeekday]);\r\n\r\n    const sortCoursesByDay = () => {\r\n        if (courses) {\r\n            const lecturesSorted = courses.filter(course => course.lecture.lectureDay === weekdays[activeWeekday]);\r\n            const labsSorted = courses.filter(course => course.lab.labDay === weekdays[activeWeekday]);\r\n            sortCoursesByHour(lecturesSorted, 'lecture');\r\n            sortCoursesByHour(labsSorted, 'lab');\r\n            return [lecturesSorted, labsSorted];\r\n        }\r\n    }\r\n\r\n    const sortCoursesByHour = (courses, type) => {\r\n        courses.sort((a, b) => {\r\n            return(getCourseStartHour(a, type) - getCourseStartHour(b, type));\r\n        })\r\n    }\r\n\r\n    const getCourseStartHour = (course, type) => {\r\n        if (type === 'lecture') {\r\n            const courseHour = course.lecture.lectureHour.split(\":\").join(\"\");\r\n            return courseHour;\r\n        } else {\r\n            const courseHour = course.lab.labHour.split(\":\").join(\"\");\r\n            return courseHour; \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-schedule-box\">\r\n            <h2>Schedule</h2>\r\n            <div className=\"home-schedule-content\">\r\n                <div className=\"home-schedule-daypicker\">\r\n                    <button className={`${activeWeekday === 1 ? \"picker-button-active\" : \"\"}`} value={1} onClick={() => setActiveWeekday(1)}>Mon</button>\r\n                    <button className={`${activeWeekday === 2 ? \"picker-button-active\" : \"\"}`} value={2} onClick={() => setActiveWeekday(2)}>Tue</button>\r\n                    <button className={`${activeWeekday === 3 ? \"picker-button-active\" : \"\"}`} value={3} onClick={() => setActiveWeekday(3)}>Wed</button>\r\n                    <button className={`${activeWeekday === 4 ? \"picker-button-active\" : \"\"}`} value={4} onClick={() => setActiveWeekday(4)}>Thu</button>\r\n                    <button className={`${activeWeekday === 5 ? \"picker-button-active\" : \"\"}`} value={5} onClick={() => setActiveWeekday(5)}>Fri</button>\r\n                    <button className={`${activeWeekday === 6 ? \"picker-button-active\" : \"\"}`} value={6} onClick={() => setActiveWeekday(6)}>Sat</button>\r\n                    <button className={`${activeWeekday === 0 ? \"picker-button-active\" : \"\"}`} value={0} onClick={() => setActiveWeekday(0)}>Sun</button>\r\n                </div>\r\n\r\n                <div className=\"home-schedule-day\">\r\n                    <div className=\"home-schedule-day-lectures\">\r\n                        <h3>Lectures</h3>\r\n                        {\r\n                            courses && sortCoursesByDay()[0].map(course => (\r\n                                <div className=\"home-schedule-day-tile\" key={course.lab.labDay + course.lab.labHour + course.lecture.lectureDay + course.lecture.lectureHour}>\r\n                                    <HomeScheduleTile course={course} type=\"lecture\"/>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"home-schedule-day-labs\">\r\n                        <h3>Labs</h3>\r\n                        {\r\n                            courses && sortCoursesByDay()[1].map(course => (\r\n                                <div className=\"home-schedule-day-tile\" key={course.lab.labDay + course.lab.labHour + course.lecture.lectureDay + course.lecture.lectureHour}>\r\n                                    <HomeScheduleTile course={course} type=\"lab\"/>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default HomeSchedule;","E:\\Web Development\\student-app\\src\\Home\\HomeSchedule\\HomeScheduleTile.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":21},{"ruleId":"128","severity":1,"message":"133","line":4,"column":8,"nodeType":"130","messageId":"131","endLine":4,"endColumn":19},{"ruleId":"128","severity":1,"message":"134","line":6,"column":8,"nodeType":"130","messageId":"131","endLine":6,"endColumn":16},{"ruleId":"128","severity":1,"message":"135","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":15},{"ruleId":"128","severity":1,"message":"136","line":11,"column":12,"nodeType":"130","messageId":"131","endLine":11,"endColumn":23},{"ruleId":"128","severity":1,"message":"137","line":7,"column":27,"nodeType":"130","messageId":"131","endLine":7,"endColumn":43},{"ruleId":"138","severity":1,"message":"139","line":35,"column":8,"nodeType":"140","endLine":35,"endColumn":12,"suggestions":"141"},{"ruleId":"124","replacedBy":"142"},{"ruleId":"126","replacedBy":"143"},{"ruleId":"138","severity":1,"message":"144","line":11,"column":8,"nodeType":"140","endLine":11,"endColumn":23,"suggestions":"145"},{"ruleId":"138","severity":1,"message":"146","line":21,"column":8,"nodeType":"140","endLine":21,"endColumn":23,"suggestions":"147"},{"ruleId":"138","severity":1,"message":"148","line":10,"column":8,"nodeType":"140","endLine":10,"endColumn":17,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":18,"column":58,"nodeType":"152","messageId":"153","endLine":18,"endColumn":59},{"ruleId":"138","severity":1,"message":"154","line":13,"column":8,"nodeType":"140","endLine":13,"endColumn":23,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'CourseDetails' is defined but never used.","'CoursesList' is defined but never used.","'useFetch' is defined but never used.","'Route' is defined but never used.","'requestData' is assigned a value but never used.","'setActiveCourses' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setEditedCourseData'. Either include it or remove the dependency array.","ArrayExpression",["158"],["156"],["157"],"React Hook useEffect has a missing dependency: 'sortCurrentCourseAssignments'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'calculateGrade'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'getAllAssignments'. Either include it or remove the dependency array.",["161"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'sortCoursesByDay'. Either include it or remove the dependency array.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [id, setEditedCourseData]",{"range":"173","text":"174"},"Update the dependencies array to be: [currentCourse, sortCurrentCourseAssignments]",{"range":"175","text":"176"},"Update the dependencies array to be: [calculateGrade, currentCourse]",{"range":"177","text":"178"},"Update the dependencies array to be: [courses, getAllAssignments]",{"range":"179","text":"180"},"Update the dependencies array to be: [activeWeekday, sortCoursesByDay]",{"range":"181","text":"182"},[1389,1393],"[id, setEditedCourseData]",[421,436],"[currentCourse, sortCurrentCourseAssignments]",[893,908],"[calculateGrade, currentCourse]",[275,284],"[courses, getAllAssignments]",[381,396],"[activeWeekday, sortCoursesByDay]"]