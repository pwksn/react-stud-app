[{"/Users/pawel/Desktop/react-stud-app/src/index.js":"1","/Users/pawel/Desktop/react-stud-app/src/App.js":"2","/Users/pawel/Desktop/react-stud-app/src/reportWebVitals.js":"3","/Users/pawel/Desktop/react-stud-app/src/Sidebar.js":"4","/Users/pawel/Desktop/react-stud-app/src/Home.js":"5","/Users/pawel/Desktop/react-stud-app/src/Courses/Courses.js":"6","/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesHome.js":"7","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseForm.js":"8","/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesList/CoursesList.js":"9","/Users/pawel/Desktop/react-stud-app/src/hooks/useFetch.js":"10","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseDetails.js":"11","/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesList/SemesterPicker.js":"12","/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesList/CourseTile.js":"13","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseResources.js":"14","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseProgress/CourseProgress.js":"15","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseAssignments/CourseAssignments.js":"16","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseAssignments/CourseAssignmentsForm.js":"17","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseProgress/CourseProgressForm.js":"18"},{"size":500,"mtime":1612554566517,"results":"19","hashOfConfig":"20"},{"size":594,"mtime":1613419078341,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1612554566518,"results":"22","hashOfConfig":"20"},{"size":496,"mtime":1613168472299,"results":"23","hashOfConfig":"20"},{"size":137,"mtime":1612554566514,"results":"24","hashOfConfig":"20"},{"size":1384,"mtime":1613168472293,"results":"25","hashOfConfig":"20"},{"size":2819,"mtime":1613637943283,"results":"26","hashOfConfig":"20"},{"size":6922,"mtime":1613419078345,"results":"27","hashOfConfig":"20"},{"size":1558,"mtime":1613168472297,"results":"28","hashOfConfig":"20"},{"size":1065,"mtime":1613168472300,"results":"29","hashOfConfig":"20"},{"size":3814,"mtime":1613666514990,"results":"30","hashOfConfig":"20"},{"size":688,"mtime":1613168472298,"results":"31","hashOfConfig":"20"},{"size":681,"mtime":1613168472295,"results":"32","hashOfConfig":"20"},{"size":2355,"mtime":1612554566511,"results":"33","hashOfConfig":"20"},{"size":4673,"mtime":1613667397336,"results":"34","hashOfConfig":"20"},{"size":3609,"mtime":1613856844463,"results":"35","hashOfConfig":"20"},{"size":2133,"mtime":1613637943280,"results":"36","hashOfConfig":"20"},{"size":783,"mtime":1613666798175,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11jgiwh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/pawel/Desktop/react-stud-app/src/index.js",[],["80","81"],"/Users/pawel/Desktop/react-stud-app/src/App.js",[],"/Users/pawel/Desktop/react-stud-app/src/reportWebVitals.js",[],"/Users/pawel/Desktop/react-stud-app/src/Sidebar.js",[],"/Users/pawel/Desktop/react-stud-app/src/Home.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/Courses.js",["82","83","84","85"],"import { useEffect, useState } from \"react\";\nimport { Route } from 'react-router-dom';\nimport CourseDetails from \"./CourseDetails/CourseDetails\"\nimport CoursesList from \"./CoursesList/CoursesList\"\nimport CourseForm from \"./CourseForm\";\nimport useFetch from \"../hooks/useFetch\";\nimport CoursesHome from \"./CoursesHome\";\n\nconst Courses = () => {\n\n    // const { data: courses, isPending, error } = useFetch('http://localhost:8000/courses');\n    // const [courseSelected, setCourseSelected] = useState(courses ? courses[0].id : null);\n    const [currentCourse, setCurrentCourse] = useState(null);\n\n    // useEffect(() => {\n    //     setCourseSelected(courses ? courses[0].id : null);\n    // }, [courses]);\n\n    const setCurrentCourseCallback = (currentCourse) => {\n        console.log(currentCourse);\n        setCurrentCourse(currentCourse);\n    }\n\n    return (\n        <div className=\"courses-box\">\n            {/* <Route exact path=\"/courses/home\" component={CoursesHome} /> */}\n            <Route exact path=\"/courses/home\" render={(props) => <CoursesHome {...props} setCurrentCourse={setCurrentCourseCallback}/>}/>\n            {/* <Route exact path =\"/courses/form/:id?\" component={CourseForm} /> */}\n            <Route exact path=\"/courses/form/:id?\" render={(props) => <CourseForm {...props} currentFormCourse={currentCourse}/>}/>\n        </div>\n    );\n}\n \nexport default Courses;","/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesHome.js",["86"],"import { useEffect, useState } from \"react\";\nimport { Route } from 'react-router-dom';\nimport useFetch from \"../hooks/useFetch\";\nimport CourseDetails from \"./CourseDetails/CourseDetails\"\nimport CoursesList from \"./CoursesList/CoursesList\"\n\nconst CoursesHome = ({ setCurrentCourse }) => {\n\n    const { data: courses, isPending, error } = useFetch('http://localhost:8000/courses');\n    const [courseSelected, setCourseSelected] = useState(null);\n    const [requestData, setRequestData] = useState(new Date());\n\n    useEffect(() => {\n        setCourseSelected(courses ? courses[0].id : null);\n    }, [courses]);\n\n    useEffect(() => {\n        console.log('useEffect!');\n    }, [requestData]);\n\n    const callbackFunction = (courseDetailsData) => {\n        console.log(courseDetailsData);\n        setCurrentCourse(courseDetailsData);\n    }\n\n    const onCourseAssignmentsChange = (data, method) => {\n        console.log(method);\n        if (method === 'remove') {\n            const currentCourse = courses.find(course => course.id === courseSelected);\n            currentCourse.assignments?.splice(data, 1);\n            fetch('http://localhost:8000/courses/' + currentCourse.id, {\n                        method: 'DELETE'\n                    }).then(() => {\n                        fetch('http://localhost:8000/courses', {\n                            method: 'POST',\n                            headers: { \"Content-Type\": \"application/json\"},\n                            body: JSON.stringify(currentCourse)\n                        }).then(() => {\n                            setRequestData(new Date());\n                        })\n                    })\n        } else if (method === 'add') {\n            fetch('http://localhost:8000/courses/' + data.id, {\n                        method: 'DELETE'\n                    }).then(() => {\n                        fetch('http://localhost:8000/courses', {\n                            method: 'POST',\n                            headers: { \"Content-Type\": \"application/json\"},\n                            body: JSON.stringify(data)\n                        }).then(() => {\n                            setRequestData(new Date());\n                        })\n                    })\n        }\n        \n    }\n\n    return (\n        <div className=\"courses\">\n            {courses && <CoursesList courses={courses.sort((a, b) => a.id - b.id)} setCourseSelection={e => setCourseSelected(e)}/>}\n            {courseSelected && courses && <CourseDetails courses={courses} courseID={courseSelected} parentCallback={callbackFunction} onCourseAssignmentsChange={onCourseAssignmentsChange}/>}\n            {error && <h1 className=\"loading-placeholder\">{error} :(</h1>}\n            {isPending && <h1 className=\"loading-placeholder\">Loading...</h1>}\n        </div>\n    );\n}\n \nexport default CoursesHome;","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseForm.js",["87"],"import { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst CourseForm = ({ currentFormCourse }) => {\n\n    const [courseName, setCourseName] = useState('');\n    const [courseSem, setCourseSem] = useState('');\n    const [lectureDate, setLectureDate] = useState('');\n    const [labDate, setLabDate] = useState('');\n    const [courseLocation, setCourseLocation] = useState('');\n    const [courseLecturer, setCourseLecturer] = useState('');\n    const [courseColor, setCourseColor] = useState('');\n    const [upelLink, setUpelLink] = useState('');\n    const [eLectureLink, setELectureLink] = useState('');\n    const [driveLink, setDriveLink] = useState('');\n\n    const [isPostPending, setIsPostPending] = useState(false);\n    const history = useHistory();\n    const { id } = useParams();\n\n    const onFormCancel = (e) => {\n        e.preventDefault(); // without this line: Warning: Form submission canceled because the form is not connected\n        history.push('/courses/home');\n    }\n\n    useEffect(() => {\n        if (id) {\n            setEditedCourseData();\n        }\n    }, [id]);\n\n    const setEditedCourseData = () => {\n        setCourseName(currentFormCourse.name);\n        setCourseSem(+currentFormCourse.sem);\n        setLectureDate(currentFormCourse.lecture);\n        setLabDate(currentFormCourse.lab);\n        setCourseLocation(currentFormCourse.location);\n        setCourseLecturer(currentFormCourse.lecturer);\n        setCourseColor(currentFormCourse.color);\n        setUpelLink(currentFormCourse.upelLink);\n        setELectureLink(currentFormCourse.eLectureLink);\n        setDriveLink(currentFormCourse.driveLink);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const newCourse = {\n            name: courseName,\n            sem: +courseSem,\n            color: courseColor,\n            lecture: lectureDate,\n            lab: labDate,\n            location: courseLocation,\n            lecturer: courseLecturer,\n            upelLink: upelLink,\n            eLectureLink: eLectureLink,\n            driveLink: driveLink\n        };\n\n        setIsPostPending(true);\n\n        if (id) {\n            fetch('http://localhost:8000/courses/' + id, {\n                    method: 'DELETE'\n                }).then(() => {\n                    fetch('http://localhost:8000/courses', {\n                        method: 'POST',\n                        headers: { \"Content-Type\": \"application/json\"},\n                        body: JSON.stringify(newCourse)\n                    }).then(() => {\n                        setIsPostPending(false);\n                        history.push('/courses/home');\n                    })\n                })\n        } else {\n            fetch('http://localhost:8000/courses', {\n                method: 'POST',\n                headers: { \"Content-Type\": \"application/json\"},\n                body: JSON.stringify(newCourse)\n            }).then(() => {\n                setIsPostPending(false);\n                history.push('/courses/home');\n            })\n        }\n    }\n\n    return (\n        <div className=\"course-form\">\n            {!id && <h1>New Course</h1>}\n            {id && <h1>{courseName} - edit course</h1>}\n            <form onSubmit={handleSubmit}>\n                <div className=\"d-flex\">\n                    <div>\n                        <label>Course name:</label>\n                        <input\n                            type=\"text\"\n                            required\n                            value={courseName}\n                            onChange={(e) => setCourseName(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label>Semester:</label>\n                        <input\n                            type=\"number\"\n                            required\n                            min=\"1\"\n                            max=\"3\"\n                            value={courseSem}\n                            onChange={(e) => setCourseSem(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <div className=\"d-flex\">\n                    <div>\n                        <label>Lecture date:</label>\n                        <input\n                            type=\"text\"\n                            required\n                            value={lectureDate}\n                            onChange={(e) => setLectureDate(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label>Lab date:</label>\n                        <input\n                            type=\"text\"\n                            required\n                            value={labDate}\n                            onChange={(e) => setLabDate(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <div className=\"d-flex\">\n                    <div>\n                        <label>Location:</label>\n                        <input\n                            type=\"text\"\n                            value={courseLocation}\n                            onChange={(e) => setCourseLocation(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label>Lecturer:</label>\n                        <input\n                            type=\"text\"\n                            value={courseLecturer}\n                            onChange={(e) => setCourseLecturer(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <label>Course color:</label>\n                <input\n                    type=\"color\"\n                    value={courseColor}\n                    onChange={(e) => setCourseColor(e.target.value)}\n                />\n                <label>UPEL link:</label>\n                <input\n                    type=\"text\"\n                    value={upelLink}\n                    onChange={(e) => setUpelLink(e.target.value)}\n                />\n                <label>E-lecture link:</label>\n                <input\n                    type=\"text\"\n                    value={eLectureLink}\n                    onChange={(e) => setELectureLink(e.target.value)}\n                />\n                <label>Drive link:</label>\n                <input\n                    type=\"text\"\n                    value={driveLink}\n                    onChange={(e) => setDriveLink(e.target.value)}\n                />\n\n                <div className=\"d-flex\">\n                    <button className=\"btn-cancel\" onClick={onFormCancel}>Cancel</button>\n                    {!isPostPending && <button type=\"submit\">Submit</button>}\n                    {isPostPending && <button disabled type=\"submit\">Wait...</button>}\n                </div>\n            </form>\n        </div>\n    );\n}\n \nexport default CourseForm;","/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesList/CoursesList.js",["88"],"import { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport CourseTile from \"./CourseTile\"\nimport SemesterPicker from \"./SemesterPicker\";\n\nconst CoursesList = ({ courses, setCourseSelection }) => {\n\n    const [activeSemester, setActiveSemester] = useState(1);\n    const [activeCourses, setActiveCourses] = useState(courses);\n\n    const onCourseSelection = (e) => {\n        setCourseSelection(e);\n    }\n\n    const setActiveSemesterCourses = () => {\n        if (activeSemester === 0) {\n            setActiveCourses(courses);\n        } else {\n            const activeSemesterCourses = courses.filter(course => course.sem === activeSemester);\n            setActiveCourses(activeSemesterCourses);\n        }\n    }\n\n    useEffect(setActiveSemesterCourses, [activeSemester]);\n\n    return (\n        <div className=\"courses-list\">\n            <div className=\"heading\">\n                <h1 className=\"header-1\">Courses</h1>\n                <Link to=\"/courses/form\">\n                    <button>\n                        <ion-icon name=\"add-outline\" style={{color: '#fff'}}></ion-icon>\n                    </button>\n                </Link>\n            </div>\n            <SemesterPicker activeSem={activeSemester} setActiveSem={setActiveSemester}/>\n            <div className=\"course-tiles\">\n                {activeCourses.map((course) => (\n                    <CourseTile course={course} key={course.id} setDetails={e => onCourseSelection(e)}/>\n                ))}\n            </div>\n        </div>\n    );\n}\n \nexport default CoursesList;","/Users/pawel/Desktop/react-stud-app/src/hooks/useFetch.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseDetails.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesList/SemesterPicker.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CoursesList/CourseTile.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseResources.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseProgress/CourseProgress.js",["89"],"import { useEffect, useState } from 'react';\nimport { CircleProgress } from 'react-gradient-progress';\nimport CourseProgressForm from './CourseProgressForm';\n\nconst calculateRemToPx = (rem) => {\n    return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);\n}\n\nconst CourseProgress = ({ currentCourse, onCourseAssignmentsChange }) => {\n\n    const [progressFormMode, setProgressFormMode] = useState(false);\n    const [pointsEarned, setPointsEarned] = useState(0);\n    const [pointsPossible, setPointsPossible] = useState(1); // to prevent 0:0 -> NaN in CircleProgress\n    const pointsPercentage = +((currentCourse.pointsEarned / currentCourse.pointsPossible) * 100).toPrecision(2);\n    \n\n    useEffect(() => {\n        setPointsEarned(currentCourse?.pointsEarned);\n        setPointsPossible(currentCourse?.pointsPossible);\n        calculateGrade();\n    }, [currentCourse]);\n\n    const onProgressModeToggle = () => {\n        setPointsEarned(currentCourse?.pointsEarned);\n        setPointsPossible(currentCourse?.pointsPossible);\n        setProgressFormMode(!progressFormMode);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        currentCourse.pointsEarned = +pointsEarned;\n        currentCourse.pointsPossible = +pointsPossible;\n        onCourseAssignmentsChange(currentCourse, 'add');\n        setProgressFormMode(false);\n    }\n\n    const calculateGrade = () => {\n        if (pointsPercentage < 50) {\n            return 2.0;\n        } else if (pointsPercentage >= 50 && pointsPercentage < 60) {\n            return 3.0;\n        } else if (pointsPercentage >= 60 && pointsPercentage < 70) {\n            return 3.5;\n        } else if (pointsPercentage >= 70 && pointsPercentage < 80) {\n            return 4.0;\n        } else if (pointsPercentage >= 80 && pointsPercentage < 90) {\n            return 4.5;\n        } else if (pointsPercentage >= 90) {\n            return 5.0;\n        }\n    }\n    \n    return (\n        <div className=\"course-progress-box\">\n            <div className=\"course-progress-header d-flex\">\n                <h2 className=\"header-1\">Progress</h2>\n                <button onClick={onProgressModeToggle}>\n                    {progressFormMode && <ion-icon name=\"close\" style={{color: '#fff'}}></ion-icon>}\n                    {!progressFormMode && <ion-icon name=\"pencil-outline\" style={{color: '#fff'}}></ion-icon>}\n                </button>\n            </div>\n            {!progressFormMode && currentCourse.pointsPossible && <div className=\"course-progress-info\">\n                <div className=\"course-progress-bar\">\n                    <CircleProgress \n                        percentage={pointsPercentage}\n                        width={calculateRemToPx(20)}\n                        strokeWidth={15}\n                        fontSize={'3rem'}\n                        fontColor={'#333'}\n                        primaryColor={['#222C67', '#222C67']}\n                        secondaryColor={'#bdc0d1'}\n                    />\n\n                    <div className=\"course-progress-points\">\n                        <h3>{currentCourse.pointsEarned}/{currentCourse.pointsPossible}</h3>\n                    </div>\n                </div>\n                <div className=\"course-progress-data\">\n                    <div className=\"course-progress-grade\">\n                        <h2>{calculateGrade()}</h2>\n                        <p>Projected grade</p>\n                    </div>\n                </div>\n            </div>}\n            {!progressFormMode && !currentCourse.pointsPossible && <div className=\"course-progress-empty\">\n                <h2>No progress yet</h2>\n            </div>}\n            {/* {progressFormMode && <div className=\"course-progress-form-box\">\n                <form className=\"course-progress-form\" onSubmit={handleSubmit}>\n                    <div className=\"d-flex\">\n                        <input type=\"number\" value={pointsEarned} onChange={(e) => setPointsEarned(e.target.value)} style={{direction: 'rtl'}}/>\n                        <p>/</p>\n                        <input type=\"number\" value={pointsPossible} onChange={(e) => setPointsPossible(e.target.value)}/>\n                    </div>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>} */}\n            {progressFormMode && \n            <CourseProgressForm \n                pointsEarned={pointsEarned} \n                pointsPossible={pointsPossible} \n                setPointsEarned={setPointsEarned}\n                setPointsPossible={setPointsPossible}\n                handleSubmit={handleSubmit}\n            />}\n            \n        </div>\n    );\n}\n \nexport default CourseProgress;","/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseAssignments/CourseAssignments.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseAssignments/CourseAssignmentsForm.js",[],"/Users/pawel/Desktop/react-stud-app/src/Courses/CourseDetails/CourseProgress/CourseProgressForm.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":19},{"ruleId":"94","severity":1,"message":"98","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":21},{"ruleId":"94","severity":1,"message":"99","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":19},{"ruleId":"94","severity":1,"message":"100","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":16},{"ruleId":"94","severity":1,"message":"101","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":15},{"ruleId":"102","severity":1,"message":"103","line":30,"column":8,"nodeType":"104","endLine":30,"endColumn":12,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":24,"column":41,"nodeType":"104","endLine":24,"endColumn":57,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"108","line":21,"column":8,"nodeType":"104","endLine":21,"endColumn":23,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'CourseDetails' is defined but never used.","'CoursesList' is defined but never used.","'useFetch' is defined but never used.","'Route' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setEditedCourseData'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'courses'. Either include it or remove the dependency array. If 'setActiveCourses' needs the current value of 'courses', you can also switch to useReducer instead of useState and read 'courses' in the reducer.",["113"],"React Hook useEffect has a missing dependency: 'calculateGrade'. Either include it or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [id, setEditedCourseData]",{"range":"121","text":"122"},"Update the dependencies array to be: [activeSemester, courses]",{"range":"123","text":"124"},"Update the dependencies array to be: [calculateGrade, currentCourse]",{"range":"125","text":"126"},[1124,1128],"[id, setEditedCourseData]",[782,798],"[activeSemester, courses]",[873,888],"[calculateGrade, currentCourse]"]